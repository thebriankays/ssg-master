// SCSS Mixins
// =====================================================
// Reusable utility mixins for common patterns.
// These mixins help maintain consistency and reduce code duplication.
// =====================================================

// =====================================================
// Responsive Design Mixins
// =====================================================

// Breakpoint mixin for min-width media queries
@mixin breakpoint($size) {
  @if map-has-key($breakpoints, $size) {
    @media (min-width: map-get($breakpoints, $size)) {
      @content;
    }
  } @else {
    @media (min-width: $size) {
      @content;
    }
  }
}

// Breakpoint mixin for max-width media queries
@mixin breakpoint-down($size) {
  @if map-has-key($breakpoints, $size) {
    @media (max-width: #{map-get($breakpoints, $size) - 1px}) {
      @content;
    }
  } @else {
    @media (max-width: #{$size - 1px}) {
      @content;
    }
  }
}

// Breakpoint mixin for range media queries
@mixin breakpoint-between($min, $max) {
  $min-width: if(map-has-key($breakpoints, $min), map-get($breakpoints, $min), $min);
  $max-width: if(map-has-key($breakpoints, $max), map-get($breakpoints, $max), $max);
  
  @media (min-width: $min-width) and (max-width: #{$max-width - 1px}) {
    @content;
  }
}

// =====================================================
// Layout Mixins
// =====================================================

// Container mixin
@mixin container {
  width: 100%;
  max-width: $container-max-width;
  margin-left: auto;
  margin-right: auto;
  padding-left: $container-padding;
  padding-right: $container-padding;
  
  @include breakpoint(sm) {
    padding-left: $spacing-6;
    padding-right: $spacing-6;
  }
  
  @include breakpoint(lg) {
    padding-left: $spacing-8;
    padding-right: $spacing-8;
  }
}

// Flexbox center mixin
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

// Absolute center mixin
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Aspect ratio mixin
@mixin aspect-ratio($width, $height) {
  position: relative;
  
  &::before {
    content: '';
    display: block;
    padding-bottom: percentage($height / $width);
  }
  
  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

// =====================================================
// Typography Mixins
// =====================================================

// Font smoothing mixin
@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

// Text truncate mixin
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Line clamp mixin
@mixin line-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Fluid typography mixin
@mixin fluid-type($min-size, $max-size, $min-viewport: 320px, $max-viewport: 1920px) {
  $slope: ($max-size - $min-size) / ($max-viewport - $min-viewport);
  $y-intercept: $min-size - $slope * $min-viewport;
  
  font-size: clamp(
    #{$min-size},
    #{$y-intercept} + #{$slope * 100}vw,
    #{$max-size}
  );
}

// =====================================================
// Visual Effects Mixins
// =====================================================

// Box shadow mixin
@mixin box-shadow($shadow: $shadow-base) {
  box-shadow: $shadow;
}

// Gradient mixin
@mixin gradient($direction: to right, $start-color: $color-primary, $end-color: $color-secondary) {
  background: linear-gradient($direction, $start-color, $end-color);
}

// Overlay mixin
@mixin overlay($color: rgba($color-black, 0.5)) {
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: $color;
    pointer-events: none;
  }
}

// =====================================================
// Animation Mixins
// =====================================================

// Transition mixin
@mixin transition($properties: all, $duration: $duration-200, $easing: $ease-in-out, $delay: 0s) {
  transition: $properties $duration $easing $delay;
}

// Hardware acceleration mixin
@mixin hardware-accelerate {
  transform: translateZ(0);
  backface-visibility: hidden;
  perspective: 1000px;
}

// Hover state mixin
@mixin hover {
  &:hover {
    @content;
  }
  
  @media (hover: none) {
    &:active {
      @content;
    }
  }
}

// Focus visible mixin
@mixin focus-visible {
  &:focus {
    outline: none;
  }
  
  &:focus-visible {
    @content;
  }
}

// =====================================================
// Utility Mixins
// =====================================================

// Clearfix mixin
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

// Visually hidden mixin
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Reset button styles
@mixin reset-button {
  padding: 0;
  border: none;
  font: inherit;
  color: inherit;
  background-color: transparent;
  cursor: pointer;
}

// Reset list styles
@mixin reset-list {
  list-style: none;
  margin: 0;
  padding: 0;
}

// =====================================================
// BEM Mixins
// =====================================================

// Element mixin
@mixin element($element) {
  &__#{$element} {
    @content;
  }
}

// Modifier mixin
@mixin modifier($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// =====================================================
// Dark Mode Mixins
// =====================================================

// Dark mode mixin
@mixin dark-mode {
  [data-theme='dark'] & {
    @content;
  }
  
  @media (prefers-color-scheme: dark) {
    [data-theme='auto'] & {
      @content;
    }
  }
}

// Light mode mixin
@mixin light-mode {
  [data-theme='light'] & {
    @content;
  }
  
  @media (prefers-color-scheme: light) {
    [data-theme='auto'] & {
      @content;
    }
  }
}

// =====================================================
// Grid Mixins
// =====================================================

// Grid container mixin
@mixin grid-container($columns: $grid-columns, $gap: $grid-gutter) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

// Grid item mixin
@mixin grid-item($span: 1) {
  grid-column: span $span;
}

// =====================================================
// Pseudo Element Mixins
// =====================================================

// Pseudo element base
@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

// =====================================================
// State Mixins
// =====================================================

// Disabled state
@mixin disabled {
  &:disabled,
  &[disabled],
  &[aria-disabled='true'] {
    @content;
  }
}

// Loading state
@mixin loading {
  &[data-loading='true'],
  &.is-loading {
    @content;
  }
}

// Active state
@mixin active {
  &:active,
  &[aria-pressed='true'],
  &.is-active {
    @content;
  }
}